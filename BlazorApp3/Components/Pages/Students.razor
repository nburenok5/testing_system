@page "/students"
@rendermode InteractiveServer
@using BlazorApp3.Models
@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Components.Models.ModelsDataBases
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

<style>
    .result-cell {
        cursor: pointer;
        transition: background-color 0.2s;
        text-align: center !important;
    }

    .result-cell:hover {
        background-color: #e9ecef;
    }

    .modal {
        display: block;
        background-color: rgba(0,0,0,0.5);
    }
</style>

@if (currentAdmin == null)
{
    <p>Загрузка данных...</p>
}
else
{
    <div class="mb-3">
        <h3>Результаты студентов @(currentAdmin.IsSuperAdmin ? "" : "по предмету " + currentAdmin.Subject)</h3>
        <button class="btn btn-secondary" @onclick="NavigateToAdminMain">Назад</button>
    </div>

    @if (students == null || allTests == null)
    {
        <p>Загрузка данных...</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>ФИО студента</th>
                        @foreach (var test in filteredTests)
                        {
                            <th style="text-align: center; min-width: 100px;">@test.Title</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in students)
                    {
                        <tr>
                            <td>@student.FullName</td>
                            @foreach (var test in filteredTests)
                            {
                                var result = student.TestResults
                                    .Where(tr => tr.TestId == test.Id)
                                    .OrderByDescending(tr => tr.DateTaken)
                                    .FirstOrDefault();

                                <td class="result-cell" @onclick="() => ShowTestAttempts(student, test)">
                                    @if (result != null)
                                    {
                                        <span>@result.Score%</span><br />
                                        <small>@result.DateTaken</small>
                                    }
                                    else
                                    {
                                        <span>—</span>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (showAttemptsModal)
    {
        <div class="modal" tabindex="-1" style="display: block;">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">История прохождений: @selectedStudent?.FullName - @selectedTest?.Title</h5>
                        <button type="button" class="btn-close" @onclick="CloseAttemptsModal"></button>
                    </div>
                    <div class="modal-body">
                        @if (testAttempts != null && testAttempts.Any())
                        {
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Дата</th>
                                        <th>Время</th>
                                        <th>Результат</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var attempt in testAttempts)
                                    {
                                        <tr>
                                            <td>@attempt.DateTaken</td>
                                            <td>@attempt.TimeTaken</td>
                                            <td>@attempt.Score%</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>Нет данных о прохождениях теста.</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseAttemptsModal">Закрыть</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Student>? students;
    private List<TestModel>? allTests;
    private List<TestModel> filteredTests => selectedTestIds.Any()
        ? allTests?.Where(t => selectedTestIds.Contains(t.Id)).ToList()
        : allTests;

    private List<int> selectedTestIds = new();
    private bool selectAllTests = true;

    private bool showAttemptsModal = false;
    private Student? selectedStudent;
    private TestModel? selectedTest;
    private List<TestResult>? testAttempts;
    private Admin? currentAdmin;

    protected override async Task OnInitializedAsync()
    {
        currentAdmin = await DbContext.Admins.FirstOrDefaultAsync(a => a.Login == "admin" && a.Password == "admin");
        
        if (currentAdmin == null && DbContext.Admins.Any())
        {
            currentAdmin = await DbContext.Admins.FirstAsync();
        }

        await LoadAllData();
    }

    private async Task LoadAllData()
    {
        allTests = await DbContext.Tests
            .OrderBy(t => t.Title)
            .ToListAsync();

        if (currentAdmin != null && !currentAdmin.IsSuperAdmin)
        {
            allTests = allTests.Where(t => t.Subject == currentAdmin.Subject).ToList();
        }

        students = await DbContext.Students
            .Include(s => s.TestResults)
            .ThenInclude(tr => tr.Test)
            .ToListAsync();

        if (selectAllTests && allTests != null)
        {
            selectedTestIds = allTests.Select(t => t.Id).ToList();
        }
    }

    private async Task ShowTestAttempts(Student student, TestModel test)
    {
        selectedStudent = student;
        selectedTest = test;
        
        testAttempts = await DbContext.TestResults
            .Where(tr => tr.StudentId == student.Id && tr.TestId == test.Id)
            .OrderByDescending(tr => tr.DateTaken)
            .ToListAsync();
            
        showAttemptsModal = true;
    }

    private void CloseAttemptsModal()
    {
        showAttemptsModal = false;
    }

    private void NavigateToAdminMain()
    {
        Navigation.NavigateTo("/admin_main");
    }
}