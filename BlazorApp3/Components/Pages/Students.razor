@page "/students"
@rendermode InteractiveServer
@using BlazorApp3.Models
@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Components.Models.ModelsDataBases
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

<div class="mb-3">
    <button class="btn btn-primary" @onclick="OpenAllResultsModal">Показать все результаты</button>
</div>

@if (students == null || allTests == null)
{
    <p>Загрузка данных...</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>ФИО студента</th>
                @foreach (var test in filteredTests)
                {
                    <th style="text-align: center; min-width: 100px;">@test.Title</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.FullName</td>
                    @foreach (var test in filteredTests)
                    {
                        var result = student.TestResults
                            .Where(tr => tr.TestId == test.Id)
                            .OrderByDescending(tr => tr.DateTaken)
                            .FirstOrDefault();

                        <td style="text-align: center;">
                            @if (result != null)
                            {
                                <span>@result.Score%</span><br />
                                <small>@result.DateTaken</small>
                            }
                            else
                            {
                                <span>—</span>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@if (showAllResultsModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Все попытки: @selectedStudent?.FullName - @selectedTest?.Title</h5>
                    <button type="button" class="btn-close" @onclick="CloseAllResultsModal"></button>
                </div>
                <div class="modal-body">
                    @if (testAttempts != null && testAttempts.Any())
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Дата и время</th>
                                    <th>Результат</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var attempt in testAttempts.OrderByDescending(a => a.DateTaken))
                                {
                                    <tr>
                                        <td>@($"{attempt.DateTaken} {attempt.TimeTaken}")</td>
                                        <td>@attempt.Score%</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>Нет данных.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAllResultsModal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Student>? students;
    private List<TestModel>? allTests;
    private List<TestModel>? filteredTests => selectedTestIds.Any()
        ? allTests?.Where(t => selectedTestIds.Contains(t.Id)).ToList()
        : allTests;

    private List<int> selectedTestIds = new();
    private bool selectAllTests = true;

    private bool showAllResultsModal = false;
    private Student? selectedStudent;
    private TestModel? selectedTest;
    private List<TestResult>? testAttempts;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllData();
    }

    private async Task LoadAllData()
    {
        allTests = await DbContext.Tests
            .OrderBy(t => t.Title)
            .ToListAsync();

        students = await DbContext.Students
            .Include(s => s.TestResults)
            .ThenInclude(tr => tr.Test)
            .ToListAsync();

        if (selectAllTests && allTests != null)
        {
            selectedTestIds = allTests.Select(t => t.Id).ToList();
        }
    }

    private async Task OpenAllResultsModal()
    {
        selectedStudent = students?.FirstOrDefault();
        selectedTest = allTests?.FirstOrDefault();

        if (selectedStudent != null && selectedTest != null)
        {
            testAttempts = await DbContext.TestResults
                .Where(tr => tr.StudentId == selectedStudent.Id && tr.TestId == selectedTest.Id)
                .OrderByDescending(tr => tr.DateTaken)
                .ToListAsync();

            showAllResultsModal = true;
        }
    }

    private void CloseAllResultsModal()
    {
        showAllResultsModal = false;
    }
}
