@page "/students"
@rendermode InteractiveServer
@using BlazorApp3.Models
@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Components.Models.ModelsDataBases
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

<h3>Список студентов</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="OpenAddStudentModal">Добавить студента</button>
    <button class="btn btn-warning" @onclick="OpenEditStudentModal" disabled="@(selectedStudent == null)">Редактировать</button>
    <button class="btn btn-danger" @onclick="OpenDeleteStudentModal" disabled="@(selectedStudent == null)">Удалить</button>
    <button class="btn btn-info" @onclick="OpenStudentDetailsModal" disabled="@(selectedStudent == null)">Данные</button>
    <button class="btn btn-secondary" @onclick="OpenResultsModal" disabled="@(selectedStudent == null)">Результаты</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>ФИО</th>
            <th>Логин</th>
            <th>Дата рождения</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in studentsList)
        {
            <tr @onclick="() => SelectStudent(student)" 
                style="cursor: pointer; @(selectedStudent == student ? "background-color: #f0f0f0;" : "")">
                <td>@student.FullName</td>
                <td>@student.Login</td>
                <td>@student.BirthDate.ToShortDateString()</td>
            </tr>
        }
    </tbody>
</table>

<!-- Модальное окно добавления студента -->
@if (showAddStudentModal)
{
    <div class="modal" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Добавить студента</h5>
                    <button type="button" class="close" @onclick="CloseAddStudentModal">&times;</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@newStudent" OnValidSubmit="AddStudent">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>ФИО:</label>
                            <InputText class="form-control" @bind-Value="newStudent.FullName" />
                            <ValidationMessage For="@(() => newStudent.FullName)" />
                        </div>
                        <div class="form-group">
                            <label>Логин:</label>
                            <InputText class="form-control" @bind-Value="newStudent.Login" />
                            <ValidationMessage For="@(() => newStudent.Login)" />
                        </div>
                        <div class="form-group">
                            <label>Пароль:</label>
                            <InputText type="password" class="form-control" @bind-Value="newStudent.Password" />
                            <ValidationMessage For="@(() => newStudent.Password)" />
                        </div>
                        <div class="form-group">
                            <label>Дата рождения:</label>
                            <InputDate class="form-control" @bind-Value="newStudent.BirthDate" />
                            <ValidationMessage For="@(() => newStudent.BirthDate)" />
                        </div>
                        <button type="submit" class="btn btn-primary">Добавить</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseAddStudentModal">Отмена</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Модальное окно редактирования студента -->
@if (showEditStudentModal && selectedStudent != null)
{
    <div class="modal" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Редактировать студента</h5>
                    <button type="button" class="close" @onclick="CloseEditStudentModal">&times;</button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@selectedStudent" OnValidSubmit="SaveEditedStudent">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>ФИО:</label>
                            <InputText class="form-control" @bind-Value="selectedStudent.FullName" />
                        </div>
                        <div class="form-group">
                            <label>Логин:</label>
                            <InputText class="form-control" @bind-Value="selectedStudent.Login" />
                        </div>
                        <div class="form-group">
                            <label>Пароль:</label>
                            <InputText type="text" class="form-control" @bind-Value="selectedStudent.Password" />
                        </div>
                        <div class="form-group">
                            <label>Дата рождения:</label>
                            <InputDate class="form-control" @bind-Value="selectedStudent.BirthDate" />
                        </div>
                        <button type="submit" class="btn btn-primary">Сохранить</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditStudentModal">Отмена</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Модальное окно информации о студенте -->
@if (showStudentDetailsModal && selectedStudent != null)
{
    <div class="modal" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Данные студента: @selectedStudent.FullName</h5>
                    <button type="button" class="close" @onclick="CloseStudentDetailsModal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label><strong>ФИО:</strong></label>
                        <div>@selectedStudent.FullName</div>
                    </div>
                    <div class="form-group">
                        <label><strong>Логин:</strong></label>
                        <div>@selectedStudent.Login</div>
                    </div>
                    <div class="form-group">
                        <label><strong>Пароль:</strong></label>
                        <div>@selectedStudent.Password</div>
                    </div>
                    <div class="form-group">
                        <label><strong>Дата рождения:</strong></label>
                        <div>@selectedStudent.BirthDate.ToShortDateString()</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseStudentDetailsModal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Модальное окно результатов тестов -->
@if (showResultsModal && selectedStudent != null)
{
    <div class="modal" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Последние результаты тестов: @selectedStudent.FullName</h5>
                    <button type="button" class="close" @onclick="CloseResultsModal">&times;</button>
                </div>
                <div class="modal-body">
                    @if (studentResults.Any())
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Тест</th>
                                    <th>Результат</th>
                                    <th>Дата прохождения</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var result in studentResults.OrderByDescending(r => r.TestDate))
                                {
                                    <tr>
                                        <td>@result.Test?.Name</td>
                                        <td>@result.Score</td>
                                        <td>@result.TestDate.ToString("dd.MM.yyyy HH:mm")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>Студент еще не проходил тесты.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseResultsModal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Модальное окно подтверждения удаления -->
@if (showDeleteStudentModal && selectedStudent != null)
{
    <div class="modal" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Подтверждение удаления</h5>
                    <button type="button" class="close" @onclick="CloseDeleteStudentModal">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Вы уверены, что хотите удалить студента <strong>@selectedStudent.FullName</strong>?</p>
                    <p class="text-danger">Все связанные результаты тестов также будут удалены!</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="DeleteStudent">Удалить</button>
                    <button class="btn btn-secondary" @onclick="CloseDeleteStudentModal">Отмена</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Student> studentsList = new();
    private Student? selectedStudent;
    private Student newStudent = new();
    private List<TestResult> studentResults = new();
    
    private bool showAddStudentModal = false;
    private bool showEditStudentModal = false;
    private bool showStudentDetailsModal = false;
    private bool showResultsModal = false;
    private bool showDeleteStudentModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        studentsList = await DbContext.Students
            .OrderBy(s => s.FullName)
            .ToListAsync();
    }

    private async Task LoadStudentResults()
    {
        if (selectedStudent != null)
        {
            studentResults = await DbContext.TestResults
                .Include(tr => tr.Test)
                .Where(tr => tr.StudentId == selectedStudent.Id)
                .GroupBy(tr => tr.TestId)
                .Select(g => g.OrderByDescending(tr => tr.TestDate).First())
                .ToListAsync();
        }
    }

    public async Task SaveTestResult(int testId, int studentId, int score)
    {
        var existingResult = await DbContext.TestResults
            .FirstOrDefaultAsync(tr => tr.TestId == testId && tr.StudentId == studentId);

        if (existingResult != null)
        {
            existingResult.Score = score;
            existingResult.TestDate = DateTime.Now;
        }
        else
        {
            var newResult = new TestResult
            {
                TestId = testId,
                StudentId = studentId,
                Score = score,
                TestDate = DateTime.Now
            };
            DbContext.TestResults.Add(newResult);
        }
        
        await DbContext.SaveChangesAsync();
    }

    private void SelectStudent(Student student)
    {
        selectedStudent = student;
    }

    private void OpenAddStudentModal()
    {
        newStudent = new Student { BirthDate = DateTime.Today };
        showAddStudentModal = true;
    }

    private void CloseAddStudentModal()
    {
        showAddStudentModal = false;
    }

    private async Task AddStudent()
    {
        DbContext.Students.Add(newStudent);
        await DbContext.SaveChangesAsync();
        await LoadStudents();
        CloseAddStudentModal();
    }

    private void OpenEditStudentModal()
    {
        showEditStudentModal = true;
    }

    private void CloseEditStudentModal()
    {
        showEditStudentModal = false;
    }

    private async Task SaveEditedStudent()
    {
        await DbContext.SaveChangesAsync();
        await LoadStudents();
        CloseEditStudentModal();
    }

    private void OpenDeleteStudentModal()
    {
        showDeleteStudentModal = true;
    }

    private void CloseDeleteStudentModal()
    {
        showDeleteStudentModal = false;
    }

    private async Task DeleteStudent()
    {
        if (selectedStudent != null)
        {
            DbContext.Students.Remove(selectedStudent);
            await DbContext.SaveChangesAsync();
            selectedStudent = null;
            await LoadStudents();
            CloseDeleteStudentModal();
        }
    }

    private void OpenStudentDetailsModal()
    {
        if (selectedStudent != null)
        {
            showStudentDetailsModal = true;
        }
    }

    private void CloseStudentDetailsModal()
    {
        showStudentDetailsModal = false;
    }

    private async Task OpenResultsModal()
    {
        await LoadStudentResults();
        showResultsModal = true;
    }

    private void CloseResultsModal()
    {
        showResultsModal = false;
    }

    private void NavigateToAdminMain()
    {
        Navigation.NavigateTo("/admin_main");
    }
}