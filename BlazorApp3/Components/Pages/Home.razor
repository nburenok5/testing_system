@page "/"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Components.Models.ModelsDataBases
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

<style>
    .login-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
        padding: 20px;
    }

    .login-card {
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 30px;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .login-card h1 {
        text-align: center;
        margin-bottom: 10px;
    }

    .login-card h3 {
        text-align: center;
        margin-bottom: 20px;
        color: #555;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-top: 5px;
    }

    .button-group {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .form-select {
        display: block;
        width: 100%;
        padding: 0.375rem 2.25rem 0.375rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }
</style>

<div class="login-wrapper">
    <div class="login-card">
        <h1>Тестирующая система</h1>
        <h3>Вход в систему</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="form-group mb-3">
                <label class="form-label">Роль:</label>
                <select class="form-select" @bind="selectedRole">
                    <option value="student">Студент</option>
                    <option value="admin">Администратор/Преподаватель</option>
                </select>
            </div>

            <div class="form-group mb-3">
                <label class="form-label">Логин:</label>
                <InputText class="form-control" @bind-Value="loginModel.Username" />
            </div>

            <div class="form-group mb-3">
                <label class="form-label">Пароль:</label>
                <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-primary">Войти</button>
                <button type="button" class="btn btn-secondary" @onclick="ClearFields">Очистить</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string selectedRole = "student";
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;

        try
        {
            if (selectedRole == "student")
            {
                var student = await DbContext.Students
                    .FirstOrDefaultAsync(s => s.Login == loginModel.Username);

                if (student == null)
                {
                    errorMessage = "Студент с таким логином не найден";
                    return;
                }

                if (student.Password != loginModel.Password)
                {
                    errorMessage = "Неверный пароль";
                    return;
                }

                Navigation.NavigateTo($"/student_main/{student.Id}");
            }
            else if (selectedRole == "admin")
            {
                // Главный администратор (не хранится в базе)
                if (loginModel.Username == "admin" && loginModel.Password == "admin")
                {
                    Navigation.NavigateTo("/admin_main");
                    return;
                }

                // Проверка обычного преподавателя
                var admin = await DbContext.Admins
                    .FirstOrDefaultAsync(a => a.Login == loginModel.Username && 
                                           a.Password == loginModel.Password);

                if (admin == null)
                {
                    errorMessage = "Неверные учетные данные";
                    return;
                }

                if (admin.IsSuperAdmin)
                {
                    Navigation.NavigateTo("/admin_main");
                }
                else
                {
                    Navigation.NavigateTo($"/journal?subject={Uri.EscapeDataString(admin.Subject)}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ошибка при входе: " + ex.Message;
        }
    }

    private void ClearFields()
    {
        loginModel = new LoginModel();
        errorMessage = string.Empty;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Логин обязателен")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Пароль обязателен")]
        public string Password { get; set; } = string.Empty;
    }
}