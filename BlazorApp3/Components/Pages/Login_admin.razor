@page "/login_admin"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager Navigation

<h3>Вход в режиме преподавателя</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <div class="form-group">
        <label for="login">Логин:</label>
        <InputText id="login" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Пароль:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Вход</button>
        <button type="button" class="btn btn-secondary" @onclick="ClearFields">Очистить</button>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;

    protected override void OnInitialized()
    {
        editContext = new EditContext(loginModel);
        validationMessageStore = new ValidationMessageStore(editContext);
    }

    private void HandleValidSubmit()
    {
        if (loginModel.Password == "12345" && loginModel.Username == "admin")
        {
            Console.WriteLine("ВСЕ ОК!");
            errorMessage = null; // Очищаем сообщение об ошибке
            Navigation.NavigateTo("/admin_main"); // Перенаправляем на главную страницу администратора
        }
        else
        {
            errorMessage = "Пользователь не найден или неверный пароль";
            validationMessageStore.Clear();
            validationMessageStore.Add(() => loginModel.Username, errorMessage);
            validationMessageStore.Add(() => loginModel.Password, errorMessage);
            editContext.NotifyValidationStateChanged();
        }
    }

    private void ClearFields()
    {
        loginModel = new LoginModel();
        errorMessage = null;
        validationMessageStore.Clear();
        editContext.MarkAsUnmodified();
        editContext.NotifyValidationStateChanged();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Логин обязателен")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Пароль обязателен")]
        public string Password { get; set; }
    }
}