@page "/login_admin"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@using BlazorApp3.Components.Models.ModelsDataBases
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

<h3>Вход в режиме преподавателя</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
    <div class="alert alert-danger">@errorMessage</div>
    }

    <div class="form-group">
        <label for="login">Логин:</label>
        <InputText id="login" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Пароль:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Вход</button>
        <button type="button" class="btn btn-secondary" @onclick="ClearFields">Очистить</button>
    </div>
</EditForm>

@code {
private LoginModel loginModel = new LoginModel();
private string errorMessage;

private async Task HandleValidSubmit()
{
errorMessage = null;

try
{
var admin = await DbContext.Admins
.FirstOrDefaultAsync(a => a.Login == loginModel.Username);

if (admin == null)
{
errorMessage = "Пользователь с таким логином не найден";
return;
}

if (admin.Password != loginModel.Password)
{
errorMessage = "Неверный пароль";
return;
}

// Успешный вход — перенаправление
Navigation.NavigateTo("/admin_main");
}
catch (Exception ex)
{
errorMessage = "Ошибка при входе в систему: " + ex.Message;
}
}

private void ClearFields()
{
loginModel = new LoginModel();
errorMessage = null;
}

public class LoginModel
{
[Required(ErrorMessage = "Логин обязателен")]
public string Username { get; set; }

[Required(ErrorMessage = "Пароль обязателен")]
public string Password { get; set; }
}
}
