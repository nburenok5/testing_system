@page "/tests"
@rendermode InteractiveServer

@using BlazorApp3.Models
@using BlazorApp3.Components.Models.ModelsDataBases
@using Microsoft.EntityFrameworkCore
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

<style>
    /* Основные стили контейнера */
    .admin-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1.5rem;
    }

    /* Стили панели действий */
    .action-panel {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    /* Стили кнопок */
    .action-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s ease;
        border: none;
    }

    /* Эффекты при наведении */
    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    /* Стили таблицы тестов */
    .tests-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

    /* Стили заголовков таблицы */
    .tests-table th {
        background-color: #3498db;
        color: white;
        padding: 1rem;
        text-align: left;
        font-weight: 600;
    }

    /* Стили ячеек таблицы */
    .tests-table td {
        padding: 1rem;
        border-bottom: 1px solid #eee;
        transition: background-color 0.2s ease;
    }

    /* Убираем границу у последней строки */
    .tests-table tr:last-child td {
        border-bottom: none;
    }

    /* Эффект при наведении на строку */
    .tests-table tr:hover td {
        background-color: #f8f9fa;
    }

    /* Стиль активной строки */
    .tests-table tr.active td {
        background-color: #e9f7fe;
    }

    /* Цвета кнопок */
    .btn-primary {
        background-color: #3498db;
        color: white;
    }

    .btn-warning {
        background-color: #f39c12;
        color: white;
    }

    .btn-danger {
        background-color: #e74c3c;
        color: white;
    }

    .btn-outline-primary {
        background-color: transparent;
        color: #3498db;
        border: 1px solid #3498db;
    }

    /* Стили модальных окон */
    .modal-content {
        border-radius: 12px;
        border: none;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .modal-header {
        border-bottom: none;
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

    .modal-title {
        font-weight: 600;
        color: #2c3e50;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        border-top: none;
        padding: 1rem 1.5rem;
        background-color: #f8f9fa;
        border-bottom-left-radius: 12px;
        border-bottom-right-radius: 12px;
    }
</style>

<h3>Управление тестами</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="OpenAddTestModal">Добавить тест</button>
    <button class="btn btn-warning" @onclick="OpenEditTestModal" disabled="@(selectedTest == null)">Изменить тест</button>
    <button class="btn btn-danger" @onclick="OpenDeleteTestModal" disabled="@(selectedTest == null)">Удалить тест</button>
    <button class="btn btn-outline-primary" @onclick="NavigateToAdminMain">На главную</button>
</div>

<table class="table tests-table">
    <thead>
    <tr>
        <th>Название теста</th>
        <th>Предмет</th>
        <th>Количество вопросов</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var test in testsList)
    {
    <tr @onclick="() => SelectTest(test)"
        @ondblclick="() => OpenTestDetailsModal(test)"
        style="cursor: pointer; @(selectedTest == test ? "background-color: #f0f0f0;" : "")">
        <td>@test.Title</td>
        <td>@test.Subject</td>
        <td>@(test.Questions?.Count ?? 0)</td>
    </tr>
    }
    </tbody>
</table>

@if (showAddTestModal)
{
<div class="modal" style="display: block; background: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Добавить тест</h5>
                <button type="button" class="close" @onclick="CloseAddTestModal">&times;</button>
            </div>
            <div class="modal-body">
                <label>Название теста:</label>
                <InputText class="form-control mb-2" @bind-Value="newTest.Title" />

                <label>Предмет:</label>
                <InputText class="form-control" @bind-Value="newTest.Subject" />

                <div class="mt-3">
                    <button class="btn btn-primary" @onclick="AddTest">Добавить</button>
                    <button class="btn btn-secondary" @onclick="CloseAddTestModal">Отмена</button>
                </div>
            </div>
        </div>
    </div>
</div>
}

@if (showTestDetailsModal && selectedTest != null)
{
<div class="modal" style="display: block; background: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Тест: @selectedTest.Title</h5>
                <button type="button" class="close" @onclick="CloseTestDetailsModal">&times;</button>
            </div>
            <div class="modal-body">
                <p><strong>Предмет:</strong> @selectedTest.Subject</p>
                <table class="table">
                    <thead>
                    <tr>
                        <th>Вопрос</th>
                        <th>Варианты ответов</th>
                        <th>Правильный ответ</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var question in selectedTest.Questions)
                    {
                    var options = question.AnswerOptions.Split('|');
                    <tr>
                        <td>@question.QuestionText</td>
                        <td>
                            <ol>
                                @for (int i = 0; i < options.Length; i++)
                                {
                                <li>@options[i]</li>
                                }
                            </ol>
                        </td>
                        <td>@question.CorrectAnswer</td>
                    </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseTestDetailsModal">Закрыть</button>
            </div>
        </div>
    </div>
</div>
}

@if (showEditTestModal && selectedTest != null)
{
<div class="modal" style="display: block; background: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактировать тест: @selectedTest.Title</h5>
                <button type="button" class="close" @onclick="CloseEditTestModal">&times;</button>
            </div>
            <div class="modal-body">
                <label>Название теста:</label>
                <InputText class="form-control mb-2" @bind-Value="selectedTest.Title" />

                <label>Предмет:</label>
                <InputText class="form-control mb-3" @bind-Value="selectedTest.Subject" />

                <h5>Вопросы теста</h5>
                <button class="btn btn-primary mb-3" @onclick="OpenAddQuestionModal">Добавить вопрос</button>

                <table class="table">
                    <thead>
                    <tr>
                        <th>Вопрос</th>
                        <th>Действия</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var question in selectedTest.Questions)
                    {
                    <tr>
                        <td>@question.QuestionText</td>
                        <td>
                            <button class="btn btn-sm btn-warning" @onclick="() => OpenEditQuestionModal(question)">Изменить</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteQuestion(question)">Удалить</button>
                        </td>
                    </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveTestChanges">Сохранить</button>
                <button class="btn btn-secondary" @onclick="CloseEditTestModal">Отмена</button>
            </div>
        </div>
    </div>
</div>
}

@if (showDeleteTestModal && selectedTest != null)
{
<div class="modal" style="display: block; background: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Удалить тест</h5>
                <button type="button" class="close" @onclick="CloseDeleteTestModal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Вы уверены, что хотите удалить тест "@selectedTest.Title"?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" @onclick="DeleteTest">Удалить</button>
                <button class="btn btn-secondary" @onclick="CloseDeleteTestModal">Отмена</button>
            </div>
        </div>
    </div>
</div>
}

@if (showQuestionModal)
{
<div class="modal" style="display: block; background: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@((isEditingQuestion ? "Редактировать вопрос" : "Добавить вопрос"))</h5>
                <button type="button" class="close" @onclick="CloseQuestionModal">&times;</button>
            </div>
            <div class="modal-body">
                <label>Вопрос:</label>
                <InputText class="form-control mb-2" @bind-Value="currentQuestion.QuestionText" />

                <label>Варианты ответов (разделяйте символом |):</label>
                <textarea class="form-control mb-2" @bind="optionsText" rows="4"></textarea>

                <label>Правильный ответ (текст, номер варианта или несколько):</label>
                <InputText class="form-control" @bind-Value="currentQuestion.CorrectAnswer" />
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveQuestion">Сохранить</button>
                <button class="btn btn-secondary" @onclick="CloseQuestionModal">Отмена</button>
            </div>
        </div>
    </div>
</div>
}

@code {
    private List<TestModel> testsList = new();
    private TestModel? selectedTest;
    private TestModel newTest = new TestModel();
    private QuestionModel currentQuestion = new QuestionModel();
    private string optionsText = "";

    private bool showAddTestModal = false;
    private bool showTestDetailsModal = false;
    private bool showEditTestModal = false;
    private bool showDeleteTestModal = false;
    private bool showQuestionModal = false;
    private bool isEditingQuestion = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTests();
    }

    private async Task LoadTests()
    {
        testsList = await DbContext.Tests
            .Include(t => t.Questions) // Явно загружаем вопросы
            .ToListAsync();
    }

    private void SelectTest(TestModel test)
    {
        selectedTest = test;
    }

    private void OpenAddTestModal()
    {
        newTest = new TestModel();
        showAddTestModal = true;
    }

    private void CloseAddTestModal()
    {
        showAddTestModal = false;
    }

    private async Task AddTest()
    {
        if (!string.IsNullOrWhiteSpace(newTest.Title) && !string.IsNullOrWhiteSpace(newTest.Subject))
        {
            DbContext.Tests.Add(newTest);
            await DbContext.SaveChangesAsync();
            await LoadTests();
            CloseAddTestModal();
        }
    }

    private void OpenTestDetailsModal(TestModel test)
    {
        selectedTest = test;
        showTestDetailsModal = true;
    }

    private void CloseTestDetailsModal()
    {
        showTestDetailsModal = false;
    }

    private void OpenEditTestModal()
    {
        if (selectedTest != null)
            showEditTestModal = true;
    }

    private void CloseEditTestModal()
    {
        showEditTestModal = false;
    }

    private void OpenDeleteTestModal()
    {
        if (selectedTest != null)
            showDeleteTestModal = true;
    }

    private void CloseDeleteTestModal()
    {
        showDeleteTestModal = false;
    }

    private async Task DeleteTest()
    {
        if (selectedTest != null)
        {
            DbContext.Tests.Remove(selectedTest);
            await DbContext.SaveChangesAsync();
            selectedTest = null;
            await LoadTests();
            CloseDeleteTestModal();
        }
    }

    private async Task SaveTestChanges()
    {
        await DbContext.SaveChangesAsync();
        await LoadTests();
        CloseEditTestModal();
    }

    private void OpenAddQuestionModal()
    {
        currentQuestion = new QuestionModel();
        optionsText = "";
        isEditingQuestion = false;
        showQuestionModal = true;
    }

    private void OpenEditQuestionModal(QuestionModel question)
    {
        currentQuestion = new QuestionModel
        {
            Id = question.Id,
            QuestionText = question.QuestionText,
            AnswerOptions = question.AnswerOptions,
            CorrectAnswer = question.CorrectAnswer,
            TestId = question.TestId
        };
        optionsText = question.AnswerOptions.Replace("|", "\n");
        isEditingQuestion = true;
        showQuestionModal = true;
    }

    private void CloseQuestionModal()
    {
        showQuestionModal = false;
    }

    private async Task SaveQuestion()
    {
        currentQuestion.AnswerOptions = optionsText.Replace("\r", "").Replace("\n", "|");

        if (isEditingQuestion)
        {
            var existing = selectedTest?.Questions.FirstOrDefault(q => q.Id == currentQuestion.Id);
            if (existing != null)
            {
                existing.QuestionText = currentQuestion.QuestionText;
                existing.AnswerOptions = currentQuestion.AnswerOptions;
                existing.CorrectAnswer = currentQuestion.CorrectAnswer;
            }
        }
        else if (selectedTest != null)
        {
            currentQuestion.TestId = selectedTest.Id;
            selectedTest.Questions.Add(currentQuestion);
        }

        await DbContext.SaveChangesAsync();
        CloseQuestionModal();
        StateHasChanged();
    }

    private async Task DeleteQuestion(QuestionModel question)
    {
        if (selectedTest != null)
        {
            selectedTest.Questions.Remove(question);
            DbContext.Questions.Remove(question);
            await DbContext.SaveChangesAsync();
            StateHasChanged();
        }
    }

    private void NavigateToAdminMain()
    {
        Navigation.NavigateTo("/admin_main");
    }
}