@page "/tests"
@rendermode InteractiveServer
@using BlazorApp3.Models
@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Components.Models.ModelsDataBases
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

<style>
    .admin-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1.5rem;
    }

    .action-panel {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .action-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s ease;
        border: none;
    }

    .btn-primary {
        background-color: #3498db;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-danger {
        background-color: #e74c3c;
        color: white;
    }

    .btn-warning {
        background-color: #ffc107;
        color: black;
    }

    .btn-info {
        background-color: #17a2b8;
        color: white;
    }

    .btn-outline-primary {
        background-color: transparent;
        color: #3498db;
        border: 1px solid #3498db;
    }

    .tests-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

    .tests-table th {
        background-color: #3498db;
        color: white;
        padding: 1rem;
        text-align: left;
        font-weight: 600;
    }

    .tests-table td {
        padding: 1rem;
        border-bottom: 1px solid #eee;
        transition: background-color 0.2s ease;
    }

    .tests-table tr:last-child td {
        border-bottom: none;
    }

    .tests-table tr:hover td {
        background-color: #f8f9fa;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1050;
        display: block;
        background: rgba(0,0,0,0.5);
    }

    .modal-dialog {
        max-width: 800px;
        margin: 1.75rem auto;
    }

    .modal-content {
        background: white;
        border-radius: 10px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }

    .loading-spinner {
        display: inline-block;
        width: 2rem;
        height: 2rem;
        border: 0.25em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    .list-group {
        display: flex;
        flex-direction: column;
        padding-left: 0;
        margin-bottom: 0;
        border-radius: 0.25rem;
    }

    .list-group-item {
        position: relative;
        display: block;
        padding: 0.75rem 1.25rem;
        background-color: #fff;
        border: 1px solid rgba(0,0,0,0.125);
    }

    .badge {
        display: inline-block;
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .bg-primary {
        background-color: #3498db!important;
    }

    @@keyframes spinner-border {
         to { transform: rotate(360deg); }
     }
</style>

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>
            Тесты по предмету: @CurrentSubject
        </h3>
    </div>

    <div class="action-panel">
        <button class="action-btn btn-primary" @onclick="OpenAddTestModal">
            <i class="bi bi-plus-circle"></i> Добавить тест
        </button>
        <button class="action-btn btn-secondary" @onclick="NavigateToTeacherMain">
            <i class="bi bi-arrow-left"></i> Назад
        </button>
    </div>

    @if (isLoading)
    {
    <div class="text-center py-4">
        <span class="loading-spinner"></span>
        <p>Загрузка тестов...</p>
    </div>
    }
    else if (!testsList.Any())
    {
    <div class="alert alert-info">
        Нет тестов по предмету "@CurrentSubject". Создайте первый тест.
    </div>
    }
    else
    {
    <div class="table-responsive">
        <table class="tests-table">
            <thead>
            <tr>
                <th>Название теста</th>
                <th>Вопросов</th>
                <th>Действия</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var test in testsList)
            {
            <tr>
                <td>@test.Title</td>
                <td>@test.Questions.Count</td>
                <td>
                    <div class="d-flex gap-2">
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenTestDetailsModal(test)">
                            <i class="bi bi-eye"></i> Просмотр
                        </button>
                        <button class="btn btn-sm btn-outline-warning" @onclick="() => OpenEditTestModal(test)">
                            <i class="bi bi-pencil"></i> Редактировать
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => OpenDeleteTestModal(test)">
                            <i class="bi bi-trash"></i> Удалить
                        </button>
                    </div>
                </td>
            </tr>
            }
            </tbody>
        </table>
    </div>
    }
</div>

<!-- Модальное окно добавления теста -->
@if (showAddTestModal)
{
<div class="modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Добавить новый тест</h5>
                <button type="button" class="btn-close" @onclick="CloseAddTestModal"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Название теста:</label>
                    <InputText class="form-control" @bind-Value="newTest.Title" />
                </div>
                <div class="form-group mt-3">
                    <label>Предмет:</label>
                    <InputText class="form-control" @bind-Value="newTest.Subject" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveTest">Сохранить</button>
                <button class="btn btn-secondary" @onclick="CloseAddTestModal">Отмена</button>
            </div>
        </div>
    </div>
</div>
}

<!-- Модальное окно просмотра теста -->
@if (showTestDetailsModal && selectedTest != null)
{
<div class="modal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Тест: @selectedTest.Title</h5>
                <button type="button" class="btn-close" @onclick="CloseTestDetailsModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-4">
                    <p><strong>Предмет:</strong> @selectedTest.Subject</p>
                    <p><strong>Количество вопросов:</strong> @selectedTest.Questions.Count</p>
                </div>

                <h5>Вопросы теста</h5>
                <div class="list-group mt-3">
                    @foreach (var question in selectedTest.Questions)
                    {
                    <div class="list-group-item mb-3">
                        <h6>@question.QuestionText</h6>
                        <div class="mt-2">
                            <p class="fw-bold mb-1">Варианты ответов:</p>
                            <ol>
                                @foreach (var option in question.AnswerOptionsList)
                                {
                                <li>@option</li>
                                }
                            </ol>
                        </div>
                        <div class="mt-2">
                            <p class="fw-bold mb-0">Правильный ответ: <span class="fw-normal">@question.CorrectAnswer</span></p>
                        </div>
                    </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseTestDetailsModal">Закрыть</button>
            </div>
        </div>
    </div>
</div>
}

<!-- Модальное окно редактирования теста -->
@if (showEditTestModal && selectedTest != null)
{
<div class="modal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактирование теста: @selectedTest.Title</h5>
                <button type="button" class="btn-close" @onclick="CloseEditTestModal"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Название теста:</label>
                            <InputText class="form-control" @bind-Value="selectedTest.Title" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Предмет:</label>
                            <InputText class="form-control" @bind-Value="selectedTest.Subject" readonly />
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5>Вопросы теста</h5>
                    <button class="btn btn-primary btn-sm" @onclick="OpenAddQuestionModal">
                        <i class="bi bi-plus-lg"></i> Добавить вопрос
                    </button>
                </div>

                <div class="list-group">
                    @foreach (var question in selectedTest.Questions)
                    {
                    <div class="list-group-item mb-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-1">@question.QuestionText</h6>
                                <small class="text-muted">Правильный ответ: @question.CorrectAnswer</small>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-warning"
                                        @onclick="() => OpenEditQuestionModal(question)">
                                    <i class="bi bi-pencil"></i> Изменить
                                </button>
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick="() => DeleteQuestion(question)">
                                    <i class="bi bi-trash"></i> Удалить
                                </button>
                            </div>
                        </div>
                    </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveTestChanges">Сохранить изменения</button>
                <button class="btn btn-secondary" @onclick="CloseEditTestModal">Отмена</button>
            </div>
        </div>
    </div>
</div>
}

<!-- Модальное окно удаления теста -->
@if (showDeleteTestModal && selectedTest != null)
{
<div class="modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Подтверждение удаления</h5>
                <button type="button" class="btn-close" @onclick="CloseDeleteTestModal"></button>
            </div>
            <div class="modal-body">
                <p>Вы действительно хотите удалить тест <strong>"@selectedTest.Title"</strong>?</p>
                <p class="text-danger">Все связанные вопросы (@selectedTest.Questions.Count) также будут удалены!</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" @onclick="DeleteTest">Удалить</button>
                <button class="btn btn-secondary" @onclick="CloseDeleteTestModal">Отмена</button>
            </div>
        </div>
    </div>
</div>
}

<!-- Модальное окно вопроса -->
<!-- Модальное окно вопроса -->
@if (showQuestionModal)
{
<div class="modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditingQuestion ? "Редактирование вопроса" : "Новый вопрос")</h5>
                <button type="button" class="btn-close" @onclick="CloseQuestionModal"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label>Текст вопроса:</label>
                    <InputText class="form-control" @bind-Value="currentQuestion.QuestionText" />
                </div>

                <div class="form-group mb-3">
                    <label>Тип вопроса:</label>
                    <select class="form-select" @bind="currentQuestion.QuestionType">
                        <option value="Single">Один правильный ответ</option>
                        <option value="Multiple">Несколько правильных ответов</option>
                        <option value="Text">Ответ — текстовое поле</option>
                    </select>
                </div>

                <div class="form-group mb-3">
                    <label>Варианты ответов (разделяйте символом |):</label>
                    <textarea class="form-control" rows="4" @bind="optionsText" 
                              disabled="@(currentQuestion.QuestionType == "Text")"></textarea>
                </div>

                @if (currentQuestion.QuestionType == "Single")
                {
                    <div class="form-group mb-3">
                        <label>Правильный ответ:</label>
                        <InputText class="form-control" @bind-Value="currentQuestion.CorrectAnswer" />
                    </div>
                }
                else if (currentQuestion.QuestionType == "Multiple")
                {
                    <div class="form-group mb-3">
                        <label>Правильные ответы (через |):</label>
                        <InputText class="form-control" @bind-Value="currentQuestion.CorrectAnswer" />
                    </div>
                }
                else if (currentQuestion.QuestionType == "Text")
                {
                    <div class="form-group mb-3">
                        <label>Правильный текст ответа:</label>
                        <InputText class="form-control" @bind-Value="currentQuestion.CorrectAnswer" />
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="SaveQuestion">Сохранить</button>
                <button class="btn btn-secondary" @onclick="CloseQuestionModal">Отмена</button>
            </div>
        </div>
    </div>
</div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "subject")]
    public string CurrentSubject { get; set; } = string.Empty;

    private List<TestModel> testsList = new();
    private TestModel newTest = new();
    private TestModel? selectedTest;
    private QuestionModel currentQuestion = new();
    private string optionsText = string.Empty;
    private bool isLoading = true;
    private bool showAddTestModal = false;
    private bool showTestDetailsModal = false;
    private bool showEditTestModal = false;
    private bool showDeleteTestModal = false;
    private bool showQuestionModal = false;
    private bool isEditingQuestion = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CurrentSubject))
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            CurrentSubject = query["subject"] ?? string.Empty;
        }
        if (!string.IsNullOrEmpty(CurrentSubject))
        {
            await LoadTests();
        }
        isLoading = false;
    }

    private async Task LoadTests()
    {
        try
        {
        testsList = await DbContext.Tests
            .Include(t => t.Questions)
            .Where(t => t.Subject == CurrentSubject)
            .OrderBy(t => t.Title)
            .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки тестов: {ex.Message}");
        }
    }

    private void OpenAddTestModal()
    {
        newTest = new TestModel { Subject = CurrentSubject };
        showAddTestModal = true;
    }

    private void CloseAddTestModal()
    {
        showAddTestModal = false;
        newTest = new TestModel();
    }

    private async Task SaveTest()
    {
        if (string.IsNullOrWhiteSpace(newTest.Title))
        {
            return;
        }
        try
        {
            DbContext.Tests.Add(newTest);
            await DbContext.SaveChangesAsync();
            await LoadTests();
            CloseAddTestModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении теста: {ex.Message}");
        }
    }

    private void OpenTestDetailsModal(TestModel test)
    {
        selectedTest = test;
        showTestDetailsModal = true;
    }

    private void CloseTestDetailsModal()
    {
        showTestDetailsModal = false;
        selectedTest = null;
    }

    private void OpenEditTestModal(TestModel test)
    {
        selectedTest = test;
        showEditTestModal = true;
    }

    private void CloseEditTestModal()
    {
        showEditTestModal = false;
        selectedTest = null;
    }

    private async Task SaveTestChanges()
    {
        try
        {
            await DbContext.SaveChangesAsync();
            await LoadTests();
            CloseEditTestModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении изменений: {ex.Message}");
        }
    }

    private void OpenDeleteTestModal(TestModel test)
    {
        selectedTest = test;
        showDeleteTestModal = true;
    }

    private void CloseDeleteTestModal()
    {
        showDeleteTestModal = false;
        selectedTest = null;
    }

    private async Task DeleteTest()
    {
        if (selectedTest == null) return;

        try
        {
            DbContext.Questions.RemoveRange(selectedTest.Questions);
            DbContext.Tests.Remove(selectedTest);
            await DbContext.SaveChangesAsync();
            await LoadTests();
            CloseDeleteTestModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при удалении теста: {ex.Message}");
        }
    }

    private void OpenAddQuestionModal()
    {
        currentQuestion = new QuestionModel { QuestionType = "Single" }; // По умолчанию один ответ
        optionsText = string.Empty;
        isEditingQuestion = false;
        showQuestionModal = true;
    }

    private void OpenEditQuestionModal(QuestionModel question)
    {
        currentQuestion = new QuestionModel
        {
            Id = question.Id,
            QuestionText = question.QuestionText,
            AnswerOptions = question.AnswerOptions,
            CorrectAnswer = question.CorrectAnswer,
            TestId = question.TestId,
            QuestionType = question.QuestionType
        };
        optionsText = question.AnswerOptions.Replace("|", "\n");
        isEditingQuestion = true;
        showQuestionModal = true;
    }

    private void CloseQuestionModal()
    {
        showQuestionModal = false;
        currentQuestion = new QuestionModel();
        optionsText = string.Empty;
    }

    private async Task SaveQuestion()
    {
        if (selectedTest == null) return;

        if (currentQuestion.QuestionType != "Text")
        {
            currentQuestion.AnswerOptions = optionsText.Replace("\r", "").Replace("\n", "|");
        }
        else
        {
            currentQuestion.AnswerOptions = string.Empty;
        }

        try
        {
            if (isEditingQuestion)
            {
                var existing = selectedTest.Questions.FirstOrDefault(q => q.Id == currentQuestion.Id);
                if (existing != null)
                {
                    existing.QuestionText = currentQuestion.QuestionText;
                    existing.AnswerOptions = currentQuestion.AnswerOptions;
                    existing.CorrectAnswer = currentQuestion.CorrectAnswer;
                    existing.QuestionType = currentQuestion.QuestionType;
                }
            }
            else
            {
                currentQuestion.TestId = selectedTest.Id;
                selectedTest.Questions.Add(currentQuestion);
            }

            await DbContext.SaveChangesAsync();
            CloseQuestionModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении вопроса: {ex.Message}");
        }
    }

    private async Task DeleteQuestion(QuestionModel question)
    {
        if (selectedTest == null) return;

        try
        {
            selectedTest.Questions.Remove(question);
            DbContext.Questions.Remove(question);
            await DbContext.SaveChangesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при удалении вопроса: {ex.Message}");
        }
    }

    private void NavigateToTeacherMain()
    {
        Navigation.NavigateTo($"/teacher_main?subject={Uri.EscapeDataString(CurrentSubject)}");
    }
}