@page "/take_test/{testId:int}/{studentId:int}" 
@rendermode InteractiveServer
@using BlazorApp3.Models
@using BlazorApp3.Components.Models.ModelsDataBases
@using Microsoft.EntityFrameworkCore
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

@if (test == null)
{
    <p>Загрузка теста...</p>
}
else
{
    <div class="test-container">
        <h3>Тест: @test.Title</h3>
        
        @if (currentQuestionIndex >= 0 && currentQuestionIndex < test.Questions.Count)
        {
            <div class="question-card">
                <h4>Вопрос @(currentQuestionIndex + 1) из @test.Questions.Count</h4>
                <p>@currentQuestion.QuestionText</p>
                
                <div class="options-list">
                    @foreach (var option in currentQuestion.AnswerOptionsList.Select((value, index) => new { value, index }))
                    {
                        <div class="form-check">
                            <input class="form-check-input" 
                                   type="radio" 
                                   name="questionOptions" 
                                   id="option_@option.index"
                                   @onchange="() => SelectAnswer(option.index)"
                                   checked="@(selectedAnswerIndex == option.index)">
                            <label class="form-check-label" for="option_@option.index">
                                @option.value
                            </label>
                        </div>
                    }
                </div>
            </div>

            <div class="navigation-buttons">
                @if (currentQuestionIndex > 0)
                {
                    <button class="btn btn-secondary" @onclick="PrevQuestion">
                        Назад
                    </button>
                }
                
                @if (currentQuestionIndex < test.Questions.Count - 1)
                {
                    <button class="btn btn-primary" @onclick="NextQuestion" disabled="@(selectedAnswerIndex == -1)">
                        Далее
                    </button>
                }
                else
                {
                    <button class="btn btn-success" @onclick="FinishTest" disabled="@(selectedAnswerIndex == -1)">
                        Завершить тест
                    </button>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int testId { get; set; }
    
    [Parameter]
    public int studentId { get; set; }

    private TestModel? test;
    private int currentQuestionIndex = 0;

    private QuestionModel currentQuestion => test!.Questions[currentQuestionIndex];

    private int selectedAnswerIndex = -1;

    private Dictionary<int, int> answers = new();

    protected override async Task OnInitializedAsync()
    {
        test = await DbContext.Tests
            .Include(t => t.Questions)
            .FirstOrDefaultAsync(t => t.Id == testId);

        if (test != null && test.Questions.Count > 0)
        {
            selectedAnswerIndex = -1;
        }
    }

    private void SelectAnswer(int answerIndex)
    {
        selectedAnswerIndex = answerIndex;
        answers[currentQuestionIndex] = answerIndex;
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < test!.Questions.Count - 1)
        {
            currentQuestionIndex++;
            selectedAnswerIndex = answers.TryGetValue(currentQuestionIndex, out var answer) ? answer : -1;
        }
    }

    private void PrevQuestion()
    {
        if (currentQuestionIndex > 0)
        {
            currentQuestionIndex--;
            selectedAnswerIndex = answers.TryGetValue(currentQuestionIndex, out var answer) ? answer : -1;
        }
    }

    private async Task FinishTest()
    {
        if (test == null) return;

        int correctAnswers = 0;

        for (int i = 0; i < test.Questions.Count; i++)
        {
            if (answers.TryGetValue(i, out var selectedIndex))
            {
                var options = test.Questions[i].AnswerOptionsList;
                if (selectedIndex >= 0 && selectedIndex < options.Count)
                {
                    var selectedText = options[selectedIndex];
                    var correctText = test.Questions[i].CorrectAnswer;
                    if (string.Equals(selectedText.Trim(), correctText.Trim(), StringComparison.OrdinalIgnoreCase))
                    {
                        correctAnswers++;
                    }
                }
            }
        }

        int score = (int)Math.Round((double)correctAnswers / test.Questions.Count * 100);

        var now = DateTime.UtcNow.AddHours(3);
        var result = new TestResult
        {
            TestId = testId,
            StudentId = studentId,
            Score = score,
            DateTaken = now.ToString("yyyy-MM-dd"),
            TimeTaken = now.ToString("HH:mm:ss")
        };

        DbContext.TestResults.Add(result);
        await DbContext.SaveChangesAsync();

        Navigation.NavigateTo($"/test_result/{result.Id}/{studentId}");
    }
}
