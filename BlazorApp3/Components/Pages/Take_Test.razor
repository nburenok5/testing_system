@page "/take_test/{testId:int}/{studentId:int}"
@rendermode InteractiveServer
@using BlazorApp3.Models
@using BlazorApp3.Components.Models.ModelsDataBases
@using Microsoft.EntityFrameworkCore
@implements IDisposable
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

<style>
    .test-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .timer {
        font-size: 1.2rem;
        font-weight: bold;
        color: #dc3545;
        margin-bottom: 20px;
    }
    
    .question-card {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .options-list {
        margin-top: 15px;
    }
    
    .form-check {
        margin-bottom: 10px;
    }
    
    .text-answer-input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        margin-top: 10px;
    }
    
    .navigation-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }
    
    .question-type-badge {
        margin-left: 10px;
        font-size: 0.8rem;
    }
</style>

@if (test == null)
{
    <p>Загрузка теста...</p>
}
else
{
    <div class="test-container">
        <h3>Тест: @test.Title</h3>

        <div class="timer">
            Оставшееся время: @timeRemaining.ToString(@"mm\:ss")
        </div>

        @if (currentQuestionIndex >= 0 && currentQuestionIndex < test.Questions.Count)
        {
            var question = currentQuestion;
            
            <div class="question-card">
                <h4>
                    Вопрос @(currentQuestionIndex + 1) из @test.Questions.Count
                    <span class="badge bg-secondary question-type-badge">
                        @GetQuestionTypeDisplayName(question.QuestionType)
                    </span>
                </h4>
                <p>@question.QuestionText</p>

                <div class="options-list">
                    @if (question.QuestionType == "Text")
                    {
                        <textarea class="text-answer-input" rows="3" 
                              @bind="textAnswers[currentQuestionIndex]"
                              @bind:event="oninput"
                              placeholder="Введите ваш ответ"></textarea>
                    }
                    else
                    {
                        @foreach (var option in question.AnswerOptionsList.Select((value, index) => new { value, index }))
                        {
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="@(question.QuestionType == "Multiple" ? "checkbox" : "radio")"
                                       name="questionOptions"
                                       id="option_@option.index"
                                       @onchange="() => SelectAnswer(option.index)"
                                       checked="@IsOptionSelected(option.index)">
                                <label class="form-check-label" for="option_@option.index">
                                    @option.value
                                </label>
                            </div>
                        }
                    }
                </div>
            </div>

            <div class="navigation-buttons">
                @if (currentQuestionIndex > 0)
                {
                    <button class="btn btn-secondary" @onclick="PrevQuestion">
                        Назад
                    </button>
                }

                @if (currentQuestionIndex < test.Questions.Count - 1)
                {
                    <button class="btn btn-primary" @onclick="NextQuestion" 
                            disabled="@(!IsCurrentQuestionAnswered())">
                        Далее
                    </button>
                }
                else
                {
                    <button class="btn btn-success" @onclick="FinishTest" 
                            disabled="@(!IsCurrentQuestionAnswered())">
                        Завершить тест
                    </button>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int testId { get; set; }

    [Parameter]
    public int studentId { get; set; }

    private TestModel? test;
    private int currentQuestionIndex = 0;
    private QuestionModel currentQuestion => test!.Questions[currentQuestionIndex];

    // Для вопросов с выбором (чекбоксы/радиокнопки)
    private Dictionary<int, List<int>> selectedAnswers = new();
    
    // Для текстовых вопросов 
    private Dictionary<int, string> textAnswers = new();

    private TimeSpan testDuration = TimeSpan.FromMinutes(10);
    private DateTime startTime;
    private TimeSpan timeRemaining;
    private System.Timers.Timer? countdownTimer;
    private bool isTimeOver = false;

    protected override async Task OnInitializedAsync()
    {
        test = await DbContext.Tests
            .Include(t => t.Questions)
            .FirstOrDefaultAsync(t => t.Id == testId);

        if (test != null && test.Questions.Count > 0)
        {
    // Инициализация словарей для всех вопросов
            for (int i = 0; i < test.Questions.Count; i++)
            {
                if (test.Questions[i].QuestionType == "Text")
                {
                    textAnswers[i] = string.Empty;
                }
                else
                {
                    selectedAnswers[i] = new List<int>();
                }
            }

            startTime = DateTime.UtcNow;
            timeRemaining = testDuration;
            countdownTimer = new System.Timers.Timer(1000);
            countdownTimer.Elapsed += UpdateTime;
            countdownTimer.Start();
        }
    }

    private bool IsOptionSelected(int optionIndex)
    {
        return selectedAnswers.TryGetValue(currentQuestionIndex, out var answers) && 
               answers.Contains(optionIndex);
    }

    private void SelectAnswer(int answerIndex)
    {
        var question = currentQuestion;
        
        if (question.QuestionType == "Multiple")
        {
            if (!selectedAnswers.ContainsKey(currentQuestionIndex))
            {
                selectedAnswers[currentQuestionIndex] = new List<int>();
            }
            
            var answers = selectedAnswers[currentQuestionIndex];
            
            if (answers.Contains(answerIndex))
            {
                answers.Remove(answerIndex);
            }
            else
            {
                answers.Add(answerIndex);
            }
        }
        else if (question.QuestionType == "Single")
        {
            selectedAnswers[currentQuestionIndex] = new List<int> { answerIndex };
        }
    }

    private bool IsCurrentQuestionAnswered()
    {
        if (test == null || currentQuestionIndex < 0 || currentQuestionIndex >= test.Questions.Count)
            return false;

        var question = test.Questions[currentQuestionIndex];
        
        if (question.QuestionType == "Text")
        {
            return textAnswers.TryGetValue(currentQuestionIndex, out var answer) && 
                   !string.IsNullOrWhiteSpace(answer);
        }
        else
        {
            return selectedAnswers.TryGetValue(currentQuestionIndex, out var answers) && 
                   answers.Any();
        }
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < test!.Questions.Count - 1)
        {
            currentQuestionIndex++;
        }
    }

    private void PrevQuestion()
    {
        if (currentQuestionIndex > 0)
        {
            currentQuestionIndex--;
        }
    }

    private async Task FinishTest()
    {
        if (test == null) return;

        countdownTimer?.Stop();

        int correctAnswers = 0;
        for (int i = 0; i < test.Questions.Count; i++)
        {
            var question = test.Questions[i];
            
            if (question.QuestionType == "Text")
            {
                if (textAnswers.TryGetValue(i, out var answer) && 
                    string.Equals(answer.Trim(), question.CorrectAnswer.Trim(), StringComparison.OrdinalIgnoreCase))
                {
                    correctAnswers++;
                }
            }
            else
            {
                if (selectedAnswers.TryGetValue(i, out var selectedIndices))
                {
                    var correctIndices = GetCorrectAnswerIndices(question);
                    if (question.QuestionType == "Single")
                    {
                        if (selectedIndices.Count == 1 && correctIndices.Contains(selectedIndices[0]))
                        {
                            correctAnswers++;
                        }
                    }
                    else if (question.QuestionType == "Multiple")
                    {
                        if (selectedIndices.Count > 0 && selectedIndices.All(x => correctIndices.Contains(x)) &&
                            selectedIndices.Count == correctIndices.Count)
                        {
                            correctAnswers++;
                        }
                    }
                }
            }
        }

        int score = (int)Math.Round((double)correctAnswers / test.Questions.Count * 100);
        var timeSpent = DateTime.UtcNow - startTime;

        var result = new TestResult
        {
            TestId = testId,
            StudentId = studentId,
            Score = score,
            DateTaken = DateTime.UtcNow.AddHours(3).ToString("yyyy-MM-dd"),
            TimeTaken = timeSpent.ToString(@"hh\:mm\:ss")
        };

        DbContext.TestResults.Add(result);
        await DbContext.SaveChangesAsync();

        Navigation.NavigateTo($"/test_result/{result.Id}/{studentId}");
    }

    private List<int> GetCorrectAnswerIndices(QuestionModel question)
    {
        var correctAnswers = question.CorrectAnswer.Split('|');
        var options = question.AnswerOptionsList;
        var indices = new List<int>();
        
        for (int i = 0; i < options.Count; i++)
        {
            if (correctAnswers.Any(c => string.Equals(c.Trim(), options[i].Trim(), StringComparison.OrdinalIgnoreCase)))
            {
                indices.Add(i);
            }
        }
        
        return indices;
    }

    private string GetQuestionTypeDisplayName(string questionType)
    {
        return questionType switch
        {
            "Single" => "Один ответ",
            "Multiple" => "Несколько ответов",
            "Text" => "Текстовый ответ",
            _ => questionType
        };
    }

    private async void UpdateTime(object? sender, System.Timers.ElapsedEventArgs e)
    {
        timeRemaining = testDuration - (DateTime.UtcNow - startTime);

        if (timeRemaining <= TimeSpan.Zero && !isTimeOver)
        {
            isTimeOver = true;
            countdownTimer?.Stop();

            await InvokeAsync(async () =>
            {
                await FinishTest();
                StateHasChanged();
            });
        }
        else
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        countdownTimer?.Dispose();
    }
}