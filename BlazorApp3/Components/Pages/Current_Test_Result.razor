@page "/test_result/{ResultId:int}/{StudentId:int}"
@rendermode InteractiveServer
@using BlazorApp3.Models
@using BlazorApp3.Components.Models.ModelsDataBases
@using Microsoft.EntityFrameworkCore
@inject DataBaseContext DbContext
@inject NavigationManager Navigation

@if (testResult == null)
{
    <div class="loading-spinner">
        <div class="spinner"></div>
        <p>Загрузка результатов...</p>
    </div>
}
else
{
    <div class="result-container">
        <h3>Тест завершён</h3>
            <div class="score-percentage">@testResult.Score%</div>
            <h4>@GetResultMessage(testResult.Score)</h4>

        <div class="result-details">
            <div class="detail-card">
                <h5>Информация о тесте</h5>
                <p><strong>Название теста:</strong> @testResult.Test?.Name</p>
                <p><strong>Дата прохождения:</strong> @testResult.TestDate.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</p>
            </div>

            <div class="detail-card">
                <h5>Статистика</h5>
                <p><strong>Правильных ответов:</strong> @CalculateCorrectAnswers() из @testResult.Test?.QuestionModels.Count</p>
            </div>
        </div>

        <div class="action-buttons">
            <button class="btn btn-primary" @onclick="NavigateToTestsList">К списку тестов</button>
            <button class="btn btn-primary" @onclick="NavigateToTestResults">Все мои результаты</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ResultId { get; set; }
    
    [Parameter]
    public int StudentId { get; set; }

    private TestResult? testResult;
    

    protected override async Task OnInitializedAsync()
    {
        testResult = await DbContext.TestResults
            .Include(tr => tr.Test)
            .ThenInclude(t => t.QuestionModels)
            .FirstOrDefaultAsync(tr => tr.Id == ResultId);
    }

    // может проще сразу передавать аргументы????????????
    private int CalculateCorrectAnswers()
    {
        if (testResult?.Test?.QuestionModels == null) return 0;
        return (int)Math.Round(testResult.Score / 100.0 * testResult.Test.QuestionModels.Count);
    }

    private string GetScoreLevel(int score)
    {
        return score switch
        {
            >= 85 => "excellent",
            >= 60 => "good",
            >= 40 => "average",
            _ => "poor"
            };
    }

    private string GetResultMessage(int score)
    {
        return score switch
        {
            >= 85 => "Отличный результат!",
            >= 60 => "Хороший результат!",
            >= 40 => "Удовлетворительно",
            _ => "Попробуйте ещё раз"
            };
    }

    private void NavigateToTestsList()
    {
        Navigation.NavigateTo($"/test_selection/{StudentId}");
    }

    private void NavigateToTestResults()
    {
        Navigation.NavigateTo($"/student_test_results/{testResult.StudentId}");
    }
}